/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import kotlin.random.Random

class App {
    val greeting: String
        // single line comment
        get() {
            /**
             * Multi line comment
             */
            return "Hello World!"
        }
}

fun main() {
    val marga: String = "Simanjuntak"
    var fullName = "Aceng Solihin";

    println(fullName + marga);

    // It started like this.
    var value = 1
    value = value + 2

    // It will be like this.
    var anotherValue = 1
    anotherValue += 2

    // The value of value and anotherValue will be the same value, which is 3
    println(value)
    println(anotherValue)
    println(App().greeting)


    // datatype: CHAR
    var vocal = 'A'

    println("Vocal " + vocal++)
    println("Vocal " + vocal++)
    println("Vocal " + vocal++)
    println("Vocal " + vocal--)
    println("Vocal " + vocal--)
    println("Vocal " + vocal--)
    println("Vocal " + vocal--)

    val text  = "Kotlin"
    for (char in text){
        print("$char ")
    }

    val statement = "Kotlin is \"Awesome!\""

    val line = """
        Line 1
        Line 2
        Line 3
        Line 4
    """.trimIndent()

    print(line)

    val name = "Kotlin"
    print("My name is $name")

    val openHours = 7
    val now = 7
    val office: String
    office = if (now > 7) {
        "Office already open"
    } else if (now == openHours){
        "Wait a minute, office will be open"
    } else {
        "Office is closed"
    }

    print(office)

    val intNumber = 100
    val longNumber: Long = 100
    val shortNumber: Short = 10
    val byteNumber = 0b11010010
    val doubleNumber: Double = 1.3
    val floatNumber: Float = 0.123456789f

    val intArray = intArrayOf(1, 3, 5, 7)  // [1, 3, 5, 7]
    intArray[2] = 11                       // [1, 3, 11, 7]

    print(intArray[2])

    var obj: String? = "Dicoding"

    if(obj is String) {
        // Tidak membutuhkan casting secara eksplisit.
        println("String length is ${obj.length}")
    }

    // Safe Calls
    val desc: String? = null
    desc?.length

    // Elvis Operator
    val singer: String? = "Elvis Presley"
    print(singer?.length ?: "N/A")

    fun setUser(name: String, age: Int): String {
        return "Your name is $name, and you $age years old"
    }

    fun printUser(name: String) = print(name)

    val user = setUser("Alfian", 19)
    println(user)

    printUser("Alfian")

    fun getFullName(first: String, middle: String, last: String = "N/A"): String {
        return "$first $middle $last"
    }

    // named argument
    val exampleName = getFullName(middle = "Asep", first = "Kurniawan", last = "Sibarani")
    print(exampleName)

    fun sumNumbers(vararg number: Int): Int {
        return number.sum()
    }

    print(sumNumbers(20,50,10,40))

    fun sets(vararg number: Int) {
        println(number)
    }

    val nums  = intArrayOf(20,23,12312,232)
    sets(231,2321,*nums,23) // spread operator, "*{variable name}"

    // Statement
    val selectedNum = 7
    val stringOfValue = when (selectedNum) {
        6 -> "value is 6"
        7 -> "value is 7"
        8 -> "value is 8"
        else -> "value cannot be reached"
    }

    val stringOfValue2 = when (value) {
        6 -> {
            println("Six")
            "value is 6"
        }
        7 -> {
            println("Seven")
            "value is 7"
        }
        8 -> {
            println("Eight")
            "value is 8"
        }
        else -> {
            println("undefined")
            "value cannot be reached"
        }
    }

    val anyType : Any = 100L
    when(anyType){
        is Long -> println("the value has a Long type")
        is String -> println("the value has a String type")
        else -> println("undefined")
    }

    val xx =  27
    val ranges = 10..50

    when(xx){
        in ranges -> println("value is in the range")
        !in ranges -> println("value is outside the range")
    }

    println(stringOfValue)

    fun getRegisterNumber() = Random.nextInt(100)
    val registerNumber = when(val regis = getRegisterNumber()){
        in 1..50 -> 50 * regis
        in 51..100 -> 100 * regis
        else -> regis
    }

    // While loop
    var counter1 = 1
    while (counter1 <= 7){
        println("Hello, World!")
        counter1++
    }

    var counter2 = 1
    do {
        println("Hello, World!")
        counter2++
    } while (counter2 <= 7)

    // Range
    val rangeInt = 1..10 step 2
    rangeInt.forEach {
        print("$it ")
    }
    println(rangeInt.step)

    // For loop
    val rangesExample = 1.rangeTo(10) step 3
    for ((index, value) in rangesExample.withIndex()) {
        println("value $value with index $index")
    }

    // Foreach
    val rangesX = 1.rangeTo(10) step 3
    rangesX.forEach { value ->
        println("value is $value!")
    }

    val tenToOne = 10.downTo(1)
    if (7 in tenToOne) {
        println("Value 7 available")
    }

    val rangeChar = 'A'.rangeTo('F')

    // Break and Continue
    val listOfInt = listOf(1, 2, 3, null, 5, null, 7)

    for (i in listOfInt) {
        if (i == 1) continue
        if (i == null) break
        print(i)
    }

    // Labels
    loop@ for (i in 1..10) {
        println("Outside Loop")

        for (j in 1..10) {
            println("Inside Loop")
            if ( j > 5) break@loop
        }
    }
}

